# Pipeline template for apig configuring

parameters:
  environment: ''
  type: ''
  tenant: ''

steps:
- bash: echo Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for tenant '${{parameters.tenant}}' and type '${{parameters.type}}'
  displayName: Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for tenant '${{parameters.tenant}}' and type '${{parameters.type}}'

- bash: |
    if [ -z "$ENVIRONMENT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"environment\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TYPE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"type\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TENANT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"tenant\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    ENVIRONMENT: ${{parameters.environment}}
    TYPE: ${{parameters.type}}
    TENANT: ${{parameters.tenant}}
  displayName: Check for required parameters

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/${{parameters.tenant}}/configuration/${{parameters.type}}/assets'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_configuration.zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Create the API Deployable from the flat representation for ${{parameters.type}} configuration'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_configuration.zip'
    artifactName: '${{parameters.type}}_configuration'

- bash: |
   echo "##vso[task.setvariable variable=environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' ${{parameters.tenant}}/environments/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' ${{parameters.tenant}}/environments/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_port]`jq -r '.values[] | select(.key == "port") | .value' ${{parameters.tenant}}/environments/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' ${{parameters.tenant}}/environments/${{parameters.environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.type}} configuration, extract ip, hostname, port and insecureflag'

- bash: |
    echo "##vso[task.setvariable variable=scopes]`jq -c '.' $(System.DefaultWorkingDirectory)/${{parameters.tenant}}/configuration/${{parameters.type}}/scopes.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of scopes to be imported'

- script: |
    echo ${{parameters.tenant}}/environments/${{parameters.environment}}
    newman run utilities/import/ImportConfig.json --reporters cli \
    --env-var importer_user='$(importer_user)' \
    --env-var importer_password='$(importer_password)' \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var scopes='$(scopes)' \
    --env-var file_Loc=$(Build.BuildId)_configuration.zip -e ${{parameters.tenant}}/environments/${{parameters.environment}} \
    $(environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Import the Deployable To API Gateway ${{parameters.type}}'
  env:
    no_proxy: $(environment_ip)

- script: |
    newman run utilities/initialize/Initialize_${{parameters.type}}.json --reporters cli \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var file_Loc=$(Build.BuildId)_configuration.zip -e ${{parameters.tenant}}/environments/${{parameters.environment}} \
    $(environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Initialize API Gateway ${{parameters.type}}'
  env:
    no_proxy: $(environment_ip)